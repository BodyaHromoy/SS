import os
import json
import random
import logging
from pathlib import Path
from zoneinfo import ZoneInfo
from datetime import time as dtime, datetime, timedelta

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ChatMemberHandler, ContextTypes, filters
)

# ========================= CONFIG =========================
TOKEN = os.getenv("BOT_TOKEN", "7954414982:AAEr72DPiy0DXgCkvfI0xVKvxKcNEw-xlok")

IMG_DIR = "images"
STATE_FILE = "state.json"
ALMATY = ZoneInfo("Asia/Almaty")

DEFAULT_STATE = {
    "CHAT_IDS": [],
    "ADMIN_IDS": [],
    "SEND_HOUR": 12,
    "SEND_MINUTE": 0
}
# ==========================================================

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")


# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ ----------
def load_state() -> dict:
    if not os.path.exists(STATE_FILE):
        save_state(DEFAULT_STATE)
        return DEFAULT_STATE.copy()
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for k, v in DEFAULT_STATE.items():
        data.setdefault(k, v)
    data["CHAT_IDS"] = list({int(x) for x in data.get("CHAT_IDS", [])})
    data["ADMIN_IDS"] = list({int(x) for x in data.get("ADMIN_IDS", [])})
    return data

def save_state(state: dict):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

STATE = load_state()


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def is_admin(user_id: int) -> bool:
    return user_id in STATE["ADMIN_IDS"]

def ensure_images_dir():
    Path(IMG_DIR).mkdir(parents=True, exist_ok=True)

def list_images():
    ensure_images_dir()
    files = [f for f in Path(IMG_DIR).iterdir()
             if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif", ".webp"}]
    files.sort()
    return files

def require_private_and_admin(update: Update) -> tuple[bool, int]:
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user
    uid = user.id if user else 0

    if chat.type != "private":
        if msg:
            try:
                msg.reply_text("–ü–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ –õ–°.")
            except Exception:
                pass
        return False, uid

    if not is_admin(uid):
        if msg:
            msg.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –î–æ–±–∞–≤—å —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã –∫–æ–º–∞–Ω–¥–æ–π /setadmin (–æ–¥–∏–Ω —Ä–∞–∑).")
        return False, uid

    return True, uid

def _compute_next_run(hh: int, mm: int) -> datetime:
    now = datetime.now(ALMATY)
    nxt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
    if nxt <= now:
        nxt += timedelta(days=1)
    return nxt

def schedule_daily_job(app):
    jq = getattr(app, "job_queue", None)
    if jq is None:
        log.warning('JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: pip install "python-telegram-bot[job-queue]==20.7"')
        return

    for job in jq.jobs():
        if job.data == "daily_send":
            job.schedule_removal()

    send_time = dtime(STATE["SEND_HOUR"], STATE["SEND_MINUTE"], tzinfo=ALMATY)
    jq.run_daily(send_random_image_job, time=send_time, data="daily_send")
    log.info(f"Daily job scheduled at {send_time} (Asia/Almaty)")

def admin_panel_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∑ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–µ–π—á–∞—Å", callback_data="send_random_now")],
        [InlineKeyboardButton("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="say")],
    ])


# ---------- –†–∞—Å—Å—ã–ª–∫–∞ ----------
async def send_to_all_chats_photo(bot, img_path: Path, caption: str | None = None):
    errs = 0
    for chat_id in list(STATE["CHAT_IDS"]):
        try:
            with img_path.open("rb") as fh:
                await bot.send_photo(chat_id, fh, caption=caption)
        except Exception as e:
            errs += 1
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")
    return errs

async def send_to_all_chats_photo_by_id(bot, file_id: str, caption: str | None = None):
    errs = 0
    for chat_id in list(STATE["CHAT_IDS"]):
        try:
            await bot.send_photo(chat_id, photo=file_id, caption=caption)
        except Exception as e:
            errs += 1
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ {chat_id}: {e}")
    return errs

async def send_to_all_chats_sticker(bot, file_id: str):
    errs = 0
    for chat_id in list(STATE["CHAT_IDS"]):
        try:
            await bot.send_sticker(chat_id, sticker=file_id)
        except Exception as e:
            errs += 1
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ {chat_id}: {e}")
    return errs

async def send_to_all_chats_text(bot, text: str):
    errs = 0
    for chat_id in list(STATE["CHAT_IDS"]):
        try:
            await bot.send_message(chat_id, text)
        except Exception as e:
            errs += 1
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {chat_id}: {e}")
    return errs

async def send_random_image_job(context: ContextTypes.DEFAULT_TYPE):
    imgs = list_images()
    if not imgs or not STATE["CHAT_IDS"]:
        return
    img = random.choice(imgs)
    # —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç
    await send_to_all_chats_photo(context.bot, img, caption="–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:")


# ---------- –ö–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –õ–° –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    nxt = _compute_next_run(STATE["SEND_HOUR"], STATE["SEND_MINUTE"])
    await update.message.reply_text(
        "–Ø –∂–∏–≤–æ–π. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "‚Ä¢ /setadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –°–ï–ë–Ø –≤ –∞–¥–º–∏–Ω—ã (–æ–¥–∏–Ω —Ä–∞–∑)\n"
        "‚Ä¢ /addadmin <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ ID\n"
        "‚Ä¢ /deladmin <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "‚Ä¢ /listadmins ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤\n"
        "‚Ä¢ /listchats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ /settime HH:MM ‚Äî –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (Asia/Almaty)\n"
        "‚Ä¢ /say <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–µ–π—á–∞—Å (–∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ /say)\n"
        "‚Ä¢ /panel ‚Äî –ø–∞–Ω–µ–ª—å (–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–µ–π—á–∞—Å / —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º)\n"
        "‚Ä¢ /addimage ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∑–∞–ø–∞—Å (–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–≤–µ—Ç–æ–º)\n\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ—Å—Ä–∞–±–æ—Ç–∫–∞: {nxt.strftime('%Y-%m-%d %H:%M:%S %Z')}"
    )

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    await update.message.reply_text(f"–¢–≤–æ–π ID: {update.effective_user.id}")

async def listchats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    chats = STATE["CHAT_IDS"]
    if not chats:
        return await update.message.reply_text("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É ‚Äî —è –∑–∞–ø–æ–º–Ω—é –µ—ë.")
    await update.message.reply_text("–ß–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n" + "\n".join(str(i) for i in chats))

async def setadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    uid = update.effective_user.id
    if uid not in STATE["ADMIN_IDS"]:
        STATE["ADMIN_IDS"].append(uid)
        save_state(STATE)
        return await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã: {uid}")
    await update.message.reply_text("–¢—ã —É–∂–µ –∞–¥–º–∏–Ω.")

async def addadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <telegram_id>")
    try:
        new_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if new_id not in STATE["ADMIN_IDS"]:
        STATE["ADMIN_IDS"].append(new_id)
        save_state(STATE)
        return await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {new_id}")
    await update.message.reply_text("–≠—Ç–æ—Ç ID —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")

async def deladmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deladmin <telegram_id>")
    try:
        rem_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if rem_id in STATE["ADMIN_IDS"]:
        STATE["ADMIN_IDS"].remove(rem_id)
        save_state(STATE)
        return await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω: {rem_id}")
    await update.message.reply_text("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def listadmins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    ids = STATE["ADMIN_IDS"]
    if not ids:
        return await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
    await update.message.reply_text("–ê–¥–º–∏–Ω—ã:\n" + "\n".join(str(i) for i in ids))

async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settime HH:MM (Asia/Almaty)")
    try:
        hh, mm = context.args[0].split(":")
        hh, mm = int(hh), int(mm)
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /settime 12:30")

    STATE["SEND_HOUR"] = hh
    STATE["SEND_MINUTE"] = mm
    save_state(STATE)

    schedule_daily_job(context.application)
    nxt = _compute_next_run(hh, mm)
    await update.message.reply_text(
        f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {hh:02d}:{mm:02d} (Asia/Almaty)\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ—Å—Ä–∞–±–æ—Ç–∫–∞: {nxt.strftime('%Y-%m-%d %H:%M:%S %Z')}"
    )

# ---- /say: —Ç–µ–∫—Å—Ç —Å–µ–π—á–∞—Å –∏–ª–∏ –≤—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä–∞ ----
async def say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    if context.args:
        text = " ".join(context.args).strip()
        if not text:
            return await update.message.reply_text("–ü—É—Å—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ /say.")
        await send_to_all_chats_text(context.bot, text)
        return await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")
    await update.message.reply_text(
        "–û–∫, –ø—Ä–∏—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º **—Ç–µ–∫—Å—Ç**, **—Ñ–æ—Ç–æ** –∏–ª–∏ **—Å—Ç–∏–∫–µ—Ä** –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã.\n–û—Ç–º–µ–Ω–∞: /cancel"
    )
    context.user_data["say_mode"] = True

# —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /say
async def say_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    if not is_admin(update.effective_user.id):
        return
    if not context.user_data.get("say_mode"):
        return
    text = (update.message.text or "").strip()
    if not text:
        return await update.message.reply_text("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
    await send_to_all_chats_text(context.bot, text)
    context.user_data["say_mode"] = False
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")

# —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ /say (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
async def say_photo_or_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –õ–° –∏ –∞–¥–º–∏–Ω
    if update.effective_chat.type != "private":
        return
    if not is_admin(update.effective_user.id):
        return

    # 1) —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ (/addimage) ‚Äî –ü–†–ò–û–†–ò–¢–ï–¢–ù–ï–ï
    if context.user_data.get("await_photo"):
        photo = update.message.photo[-1]
        f = await photo.get_file()
        ensure_images_dir()
        fname = f"{f.file_unique_id}.jpg"
        save_path = Path(IMG_DIR) / fname
        await f.download_to_drive(str(save_path))
        context.user_data["await_photo"] = False
        return await update.message.reply_text(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fname}")

    # 2) —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ /say ‚Äî –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if context.user_data.get("say_mode"):
        file_id = update.message.photo[-1].file_id
        cap = (update.message.caption or "").strip() or None
        await send_to_all_chats_photo_by_id(context.bot, file_id, caption=cap)
        context.user_data["say_mode"] = False
        return await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")

    # –∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä


# —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ /say
async def say_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    if not is_admin(update.effective_user.id):
        return
    if not context.user_data.get("say_mode"):
        return
    file_id = update.message.sticker.file_id
    await send_to_all_chats_sticker(context.bot, file_id)
    context.user_data["say_mode"] = False
    await update.message.reply_text("‚úÖ –°—Ç–∏–∫–µ—Ä —Ä–∞–∑–æ—Å–ª–∞–Ω.")

# ---------- –ü–∞–Ω–µ–ª—å ----------
async def panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_kb())

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    chat = q.message.chat
    uid = q.from_user.id

    if chat.type != "private":
        await q.answer()
        return
    if not is_admin(uid):
        await q.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await q.answer()
    if q.data == "send_random_now":
        imgs = list_images()
        if not imgs:
            return await q.edit_message_text("–í –ø–∞–ø–∫–µ images/ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.")
        img = random.choice(imgs)
        await send_to_all_chats_photo(context.bot, img, caption="–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ :0")  # —Ç—É—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ ‚Äî —ç—Ç–æ —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        return await q.edit_message_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã.", reply_markup=admin_panel_kb())
    if q.data == "say":
        await q.edit_message_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä. –û—Ç–º–µ–Ω–∞: /cancel")
        context.user_data["say_mode"] = True


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –∑–∞–ø–∞—Å ----------
async def addimage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ok, _ = require_private_and_admin(update)
    if not ok:
        return
    ensure_images_dir()
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–∞: /cancel")
    context.user_data["await_photo"] = True

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    if not is_admin(update.effective_user.id):
        return
    context.user_data["await_photo"] = False
    context.user_data["say_mode"] = False
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")


# ---------- –¢—Ä–µ–∫–∏–Ω–≥ —á–∞—Ç–æ–≤ ----------
def _status_is_member(status: str) -> bool:
    return status in ("member", "administrator", "creator")

async def my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu: ChatMemberUpdated = update.my_chat_member
    chat = cmu.chat
    old = cmu.old_chat_member
    new = cmu.new_chat_member

    if chat.type not in ("group", "supergroup", "channel"):
        return

    was_in = _status_is_member(getattr(old, "status", "left"))
    is_in = _status_is_member(getattr(new, "status", "left"))

    if not was_in and is_in:
        if chat.id not in STATE["CHAT_IDS"]:
            STATE["CHAT_IDS"].append(chat.id)
            save_state(STATE)
            log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat.id}")
    elif was_in and not is_in:
        if chat.id in STATE["CHAT_IDS"]:
            STATE["CHAT_IDS"].remove(chat.id)
            save_state(STATE)
            log.info(f"–£–¥–∞–ª—ë–Ω —á–∞—Ç: {chat.id}")


# ---------- MAIN ----------
def main():
    if TOKEN == "PASTE_YOUR_BOT_TOKEN_HERE":
        raise SystemExit("–£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN –∏–ª–∏ –≤ –∫–æ–¥–µ TOKEN.")

    app = ApplicationBuilder().token(TOKEN).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    schedule_daily_job(app)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CommandHandler("setadmin", setadmin))
    app.add_handler(CommandHandler("addadmin", addadmin))
    app.add_handler(CommandHandler("deladmin", deladmin))
    app.add_handler(CommandHandler("listadmins", listadmins))
    app.add_handler(CommandHandler("settime", settime))
    app.add_handler(CommandHandler("listchats", listchats))
    app.add_handler(CommandHandler("say", say))

    # –ü–∞–Ω–µ–ª—å –∏ –∫–æ–ª–±—ç–∫–∏
    app.add_handler(CommandHandler("panel", panel))
    app.add_handler(CallbackQueryHandler(on_cb))

    # –†–µ–∂–∏–º—ã –ø–æ—Å–ª–µ /say –∏ –ø–æ—Å–ª–µ /addimage
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, say_text))
    app.add_handler(MessageHandler(filters.PHOTO, say_photo_or_upload))
    app.add_handler(MessageHandler(filters.Sticker.ALL, say_sticker))

    # –¢—Ä–µ–∫–∏–Ω–≥, –≥–¥–µ –±–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç
    app.add_handler(ChatMemberHandler(my_chat_member, chat_member_types=ChatMemberHandler.MY_CHAT_MEMBER))

    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
