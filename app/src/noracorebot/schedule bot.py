import requests
import pytz
from datetime import datetime, timedelta
from icalendar import Calendar
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ICS_URL_TEMPLATE = "https://ruz.spbstu.ru/faculty/123/groups/42153/ical?date={date}"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="this_week")],
        [InlineKeyboardButton("üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="next_week")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_week_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    today = datetime.now(MOSCOW_TZ).date()
    if query.data == "this_week":
        start_date = today - timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    else:
        start_date = today - timedelta(days=today.weekday()) + timedelta(days=7)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏

    await send_schedule(query, start_date)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def send_schedule(query, start_date):
    date_str = start_date.strftime("%Y-%m-%d")
    url = ICS_URL_TEMPLATE.format(date=date_str)
    response = requests.get(url)
    if response.status_code != 200:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    cal = Calendar.from_ical(response.content)
    events_by_day = {}

    for component in cal.walk():
        if component.name == "VEVENT":
            start = component.get("DTSTART").dt
            summary = component.get("SUMMARY")
            location = component.get("LOCATION")

            if not isinstance(start, datetime):
                start = datetime.combine(start, datetime.min.time())
            start = start.astimezone(MOSCOW_TZ)

            day_key = start.date()
            if day_key not in events_by_day:
                events_by_day[day_key] = []
            events_by_day[day_key].append(
                (start, f"{start.strftime('%H:%M')} ‚Äî {summary} ({location})")
            )

    if not events_by_day:
        await query.edit_message_text("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
    else:
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π –∏ —Å–æ–±—ã—Ç–∏–π
        sorted_days = sorted(events_by_day.keys())
        message_parts = []
        for day in sorted_days:
            events = sorted(events_by_day[day], key=lambda x: x[0])  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            day_str = day.strftime("%a, %d.%m.%Y")
            events_text = "\n".join(e[1] for e in events)
            message_parts.append(f"üìÖ {day_str}\n{events_text}")
        message = "\n\n".join(message_parts)

        await query.edit_message_text(message)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token("8275475788:AAFjTJjpEZ4DqWey_UB23GFC85VVCIdFWn4").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_week_choice))

    app.run_polling()

if __name__ == "__main__":
    main()
