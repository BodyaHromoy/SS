# Generated by Django 5.0.4 on 2024-12-09 09:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='big_battary_list',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=255, null=True, verbose_name='SN')),
                ('year', models.CharField(max_length=255, null=True, verbose_name='YEAR')),
                ('cycle_times', models.CharField(max_length=255, null=True, verbose_name='CYCLE_TIMES')),
                ('is_tired', models.BooleanField(default=False, verbose_name='IS_TIRED')),
            ],
        ),
        migrations.CreateModel(
            name='Cabinet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shkaf_id', models.CharField(max_length=255, unique=True)),
                ('location', models.TextField()),
                ('street', models.TextField()),
                ('extra_inf', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Marked',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=255, null=True, verbose_name='SN')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stationid', models.CharField(null=True)),
                ('balance_status', models.CharField(max_length=255, null=True)),
                ('capacity', models.CharField(max_length=255, null=True)),
                ('cap_coulo', models.CharField(max_length=255, null=True)),
                ('cap_percent', models.CharField(max_length=255, null=True)),
                ('cap_vol', models.CharField(max_length=255, null=True)),
                ('charge_cap_h', models.CharField(max_length=255, null=True)),
                ('charge_cap_l', models.CharField(max_length=255, null=True)),
                ('charge_times', models.CharField(max_length=255, null=True)),
                ('core_volt', models.CharField(max_length=255, null=True)),
                ('current_cur', models.CharField(max_length=255, null=True)),
                ('cycle_times', models.CharField(max_length=255, null=True)),
                ('design_voltage', models.CharField(max_length=255, null=True)),
                ('fun_boolean', models.CharField(max_length=255, null=True)),
                ('healthy', models.CharField(max_length=255, null=True)),
                ('ochg_state', models.CharField(max_length=255, null=True)),
                ('odis_state', models.CharField(max_length=255, null=True)),
                ('over_discharge_times', models.CharField(max_length=255, null=True)),
                ('pcb_ver', models.CharField(max_length=255, null=True)),
                ('remaining_cap', models.CharField(max_length=255, null=True)),
                ('remaining_cap_percent', models.CharField(max_length=255, null=True)),
                ('sn', models.CharField(max_length=255, null=True)),
                ('sw_ver', models.CharField(max_length=255, null=True)),
                ('temp_cur1', models.CharField(max_length=255, null=True)),
                ('temp_cur2', models.CharField(max_length=255, null=True)),
                ('total_capacity', models.CharField(max_length=255, null=True)),
                ('vid', models.CharField(max_length=255, null=True)),
                ('voltage_cur', models.CharField(max_length=255, null=True)),
                ('session_start', models.DateTimeField(null=True, verbose_name='SESSION_START')),
                ('time', models.DateTimeField(null=True, verbose_name='time')),
                ('reason', models.CharField(max_length=255, null=True)),
                ('city', models.CharField(max_length=255, null=True)),
                ('zone', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('courier', 'Courier'), ('logistician', 'Logistician'), ('regional_manager', 'Regional Manager'), ('engineer', 'Engineer')], default='courier', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='user', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cabinet_settings_for_auto_marking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settings_for', models.CharField(max_length=255, null=True, unique=True, verbose_name='SETTINGS_FOR')),
                ('sn_error', models.BooleanField(default=False, verbose_name='SN_ERROR')),
                ('year_of_manufacture', models.CharField(max_length=255, null=True)),
                ('max_cycle_times', models.CharField(null=True)),
                ('vid', models.CharField(max_length=255, null=True)),
                ('sw_ver', models.CharField(max_length=255, null=True)),
                ('critical_temp', models.IntegerField(null=True)),
                ('lock_status', models.BooleanField(default=False, verbose_name='LOCK_STATUS')),
                ('temp_inside', models.IntegerField(null=True)),
                ('fan_status', models.BooleanField(default=False, verbose_name='FAN_STATUS')),
                ('mains_voltage', models.CharField(max_length=255, null=True)),
                ('reserve_voltage', models.CharField(max_length=255, null=True)),
                ('cabinet_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.cabinet', to_field='shkaf_id')),
            ],
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpointid', models.IntegerField(verbose_name='EndpointID')),
                ('balance_status', models.CharField(max_length=255, null=True, verbose_name='BALANCE_STATUS')),
                ('capacity', models.CharField(max_length=255, null=True, verbose_name='CAPACITY')),
                ('cap_coulo', models.CharField(max_length=255, null=True, verbose_name='CAP_COULO')),
                ('cap_percent', models.CharField(max_length=255, null=True, verbose_name='CAP_PERCENT')),
                ('cap_vol', models.CharField(max_length=255, null=True, verbose_name='CAP_VOL')),
                ('charge_cap_h', models.CharField(max_length=255, null=True, verbose_name='CHARGE_CAP_H')),
                ('charge_cap_l', models.CharField(max_length=255, null=True, verbose_name='CHARGE_CAP_L')),
                ('charge_times', models.CharField(max_length=255, null=True, verbose_name='CHARGE_TIMES')),
                ('core_volt', models.CharField(max_length=255, null=True, verbose_name='CORE_VOLT')),
                ('current_cur', models.CharField(max_length=255, null=True, verbose_name='CURRENT_CUR')),
                ('cycle_times', models.CharField(max_length=255, null=True, verbose_name='CYCLE_TIMES')),
                ('design_voltage', models.CharField(max_length=255, null=True, verbose_name='DESIGN_VOLTAGE')),
                ('fun_boolean', models.CharField(max_length=255, null=True, verbose_name='FUN_BOOLEAN')),
                ('healthy', models.CharField(max_length=255, null=True, verbose_name='HEALTHY')),
                ('ochg_state', models.CharField(max_length=255, null=True, verbose_name='OCHG_STATE')),
                ('odis_state', models.CharField(max_length=255, null=True, verbose_name='ODIS_STATE')),
                ('over_discharge_times', models.CharField(max_length=255, null=True, verbose_name='OVER_DISCHARGE_TIMES')),
                ('pcb_ver', models.CharField(max_length=255, null=True, verbose_name='PCB_VER')),
                ('remaining_cap', models.CharField(max_length=255, null=True, verbose_name='REMAINING_CAP')),
                ('remaining_cap_percent', models.CharField(max_length=255, null=True, verbose_name='REMAINING_CAP_PERCENT')),
                ('sn', models.CharField(max_length=255, null=True, verbose_name='SN')),
                ('sw_ver', models.CharField(max_length=255, null=True, verbose_name='SW_VER')),
                ('temp_cur1', models.CharField(max_length=255, null=True, verbose_name='TEMP_CUR1')),
                ('temp_cur2', models.CharField(max_length=255, null=True, verbose_name='TEMP_CUR2')),
                ('total_capacity', models.CharField(max_length=255, null=True, verbose_name='TOTAL_CAPACITY')),
                ('vid', models.CharField(max_length=255, null=True, verbose_name='VID')),
                ('voltage_cur', models.CharField(max_length=255, null=True, verbose_name='VOLTAGE_CUR')),
                ('session_start', models.DateTimeField(null=True, verbose_name='SESSION_START')),
                ('session_end', models.DateTimeField(null=True, verbose_name='SESSION_END')),
                ('status', models.CharField(max_length=255, null=True, verbose_name='STATUS')),
                ('time', models.DateTimeField(null=True, verbose_name='time')),
                ('vir_sn_eid', models.TextField(null=True, verbose_name='VIR_SN_EID')),
                ('is_error', models.BooleanField(default=False, verbose_name='IS_ERROR')),
                ('message', models.CharField(max_length=255, null=True, verbose_name='MESSAGE')),
                ('cabinet_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.cabinet', to_field='shkaf_id')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(max_length=255, unique=True)),
                ('country', models.CharField(max_length=255)),
                ('users', models.ManyToManyField(related_name='citys', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.vendor', to_field='vendor_name')),
            ],
        ),
        migrations.AddField(
            model_name='cabinet',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.city', to_field='city_name'),
        ),
        migrations.CreateModel(
            name='Settings_for_settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn_error', models.BooleanField(default=False, verbose_name='SN_ERROR')),
                ('year_of_manufacture', models.BooleanField(default=False, verbose_name='YEAR_OF_MANUFACTURE')),
                ('max_cycle_times', models.BooleanField(default=False, verbose_name='MAX_CYCLE_TIMES')),
                ('vid', models.BooleanField(default=False, verbose_name='VID')),
                ('sw_ver', models.BooleanField(default=False, verbose_name='SW_VER')),
                ('settings_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.cabinet_settings_for_auto_marking', to_field='settings_for')),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='cabinet',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.vendor', to_field='vendor_name'),
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_name', models.CharField(max_length=255, unique=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.city', to_field='city_name')),
                ('users', models.ManyToManyField(related_name='zones', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.vendor', to_field='vendor_name')),
            ],
        ),
        migrations.AddField(
            model_name='cabinet',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ss_main.zone', to_field='zone_name'),
        ),
    ]
