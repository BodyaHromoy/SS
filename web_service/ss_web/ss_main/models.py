from django.db import models


class City(models.Model):
    name = models.TextField()


class Cabinet(models.Model):
    city = models.ForeignKey(City, on_delete=models.CASCADE)
    location = models.TextField()
    readable_name = models.TextField()


class Cell(models.Model):
    endpointid = models.IntegerField(primary_key=True)
    cabinet = models.ForeignKey(Cabinet, on_delete=models.CASCADE)
    stationid = models.IntegerField(null=True)
    balance_status = models.CharField(max_length=255, null=True)
    capacity = models.CharField(max_length=255, null=True)
    cap_coulo = models.CharField(max_length=255, null=True)
    cap_percent = models.CharField(max_length=255, null=True)
    cap_vol = models.CharField(max_length=255, null=True)
    charge_cap_h = models.CharField(max_length=255, null=True)
    charge_cap_l = models.CharField(max_length=255, null=True)
    charge_times = models.CharField(max_length=255, null=True)
    core_volt = models.CharField(max_length=255, null=True)
    current_cur = models.CharField(max_length=255, null=True)
    cycle_times = models.CharField(max_length=255, null=True)
    design_voltage = models.CharField(max_length=255, null=True)
    fun_boolean = models.CharField(max_length=255, null=True)
    healthy = models.CharField(max_length=255, null=True)
    ochg_state = models.CharField(max_length=255, null=True)
    odis_state = models.CharField(max_length=255, null=True)
    over_discharge_times = models.CharField(max_length=255, null=True)
    pcb_ver = models.CharField(max_length=255, null=True)
    remaining_cap = models.CharField(max_length=255, null=True)
    remaining_cap_percent = models.CharField(max_length=255, null=True)
    sn = models.CharField(max_length=255, null=True)
    sw_ver = models.CharField(max_length=255, null=True)
    temp_cur1 = models.CharField(max_length=255, null=True)
    temp_cur2 = models.CharField(max_length=255, null=True)
    total_capacity = models.CharField(max_length=255, null=True)
    vid = models.CharField(max_length=255, null=True)
    voltage_cur = models.CharField(max_length=255, null=True)
    session_start = models.CharField(max_length=255, null=True)
    time = models.CharField(max_length=255, null=True)


class Report(models.Model):
    endpointid = models.IntegerField(null=True)
    stationid = models.IntegerField(null=True)
    balance_status = models.CharField(max_length=255, null=True)
    capacity = models.CharField(max_length=255, null=True)
    cap_coulo = models.CharField(max_length=255, null=True)
    cap_percent = models.CharField(max_length=255, null=True)
    cap_vol = models.CharField(max_length=255, null=True)
    charge_cap_h = models.CharField(max_length=255, null=True)
    charge_cap_l = models.CharField(max_length=255, null=True)
    charge_times = models.CharField(max_length=255, null=True)
    core_volt = models.CharField(max_length=255, null=True)
    current_cur = models.CharField(max_length=255, null=True)
    cycle_times = models.CharField(max_length=255, null=True)
    design_voltage = models.CharField(max_length=255, null=True)
    fun_boolean = models.CharField(max_length=255, null=True)
    healthy = models.CharField(max_length=255, null=True)
    ochg_state = models.CharField(max_length=255, null=True)
    odis_state = models.CharField(max_length=255, null=True)
    over_discharge_times = models.CharField(max_length=255, null=True)
    pcb_ver = models.CharField(max_length=255, null=True)
    remaining_cap = models.CharField(max_length=255, null=True)
    remaining_cap_percent = models.CharField(max_length=255, null=True)
    sn = models.CharField(max_length=255, null=True)
    sw_ver = models.CharField(max_length=255, null=True)
    temp_cur1 = models.CharField(max_length=255, null=True)
    temp_cur2 = models.CharField(max_length=255, null=True)
    total_capacity = models.CharField(max_length=255, null=True)
    vid = models.CharField(max_length=255, null=True)
    voltage_cur = models.CharField(max_length=255, null=True)
    session_start = models.CharField(max_length=255, null=True)
    time = models.CharField(max_length=255, null=True)
    reason = models.CharField(max_length=255, null=True)
